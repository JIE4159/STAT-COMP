from numpy import array, diag, dot, maximum, empty, repeat, ones, sum
from numpy.linalg import inv
from numpy import zeros
###import dataset
challenger=np.loadtxt('C:\\Users\\xiong\\Desktop\\challenger.txt')
yy=challenger[:,1]
xx=challenger[:,2:4]

def IRLS(Y,x,maxiter,w_init=1,d=0.0001, tolerance=0.001):
    n,p=x.shape
    delta=np.array(repeat(d,n).reshape(1,n))
    w=repeat(1,n)
    W=diag(w)
    z=inv(W).dot(Y)
    B=dot(inv(x.T.dot(W).dot(x)),x.T.dot(W).dot(z))
    for _ in range(maxiter):
        _B = B
        _w = abs(Y - x.dot(B)).T
        # w = float(1) / maximum(delta, _w)
        tmpx = x.dot(B)
        tmpxx = tmpx * (1 - tmpx)
        tmpxxx = tmpxx.reshape(1, 23)
        W = diag(tmpxxx[0])
        z = x.dot(B)-inv(W).dot(x.dot(B)-Y)
        B = dot(inv(x.T.dot(W).dot(x)),
                (x.T.dot(W).dot(z)))
        tol = sum(abs(B-_B))
        print("Tolerance = %s" % tol)
        if tol < tolerance:
            return B
    return B

B=IRLS(yy,xx,10,w_init=1,d=0.0001, tolerance=0.001)
beta_0=sum(yy-xx.dot(B)/yy.shape[0])
