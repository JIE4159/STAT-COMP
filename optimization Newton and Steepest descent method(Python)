import numpy as np
import matplotlib.pyplot as plt
 
def func(x):
    return 4*x[0]*x[1]+(x[0]+x[1]**2)**2

# first order derivatives of the function
def dfunc(x):
    df1 = 4*x[1]+2*x[0]+2*x[1]**2
    df2 = 4*x[0]+4*x[0]*x[1]+4*x[1]**3
    return np.array([df1, df2])

def invhess(x):
    df11 = 2
    df12 = 4+4*x[1]
    df21 = 4+4*x[1]
    df22 = 4*x[0]+12*x[1]**2
    hess = np.array([[df11, df12], [df21, df22]])
    return inv(hess)

def newton(x, max_int):
    miter = 1
    step = .5
    vals = []
    objectfs = []
    while miter <= max_int:
        vals.append(x)
        objectfs.append(func(x))
        temp = x-step*(invhess(x).dot(dfunc(x)))
        if np.abs(func(temp)-func(x))>0.01:
            x = temp
        else:
            break
        print(x, func(x), miter)
        miter += 1
    return vals, objectfs, miter

start = [5, 5]
val, objectf, iters = newton(start, 100)

x = np.array([i[0] for i in val])
y = np.array([i[1] for i in val])
z = np.array(objectf)
fig = plt.figure()
ax = fig.gca(projection='3d')
ax.scatter(x, y, z, label='newton method')
plt.savefig('./res/newton.jpg')

###########part1 b steepest descent with golden secton ###############
###########define a golden section function to find best alpha########
###plot 3D 

fig = plt.figure()
ax = fig.gca(projection="3d")
xmesh, ymesh = np.mgrid[-3:2:50j,-3:2:50j]
xx=np.array([xmesh, ymesh])
fmesh = func([xmesh, ymesh])
ax.plot_surface(xmesh, ymesh, fmesh)
#########   plot contour   ####

plt.axis("equal")
plt.contour(xmesh, ymesh, fmesh)

seg=(np.sqrt(5)-1)/2

def goldsearch(f,x,lower,upper,merror):
    error = 1000
    vals = []
    vals.append((lower+upper)/2)
    objectf = []
    objectf.append(f((lower+upper)/2,x))
    while error >= merror:
        temp1 = upper-seg*(upper-lower)
        temp2 = lower+seg*(upper-lower)
        if f(temp1,x)-f(temp2,x)<0:
            upper = temp2
        else:
            lower = temp1
        error = np.abs(f(temp1,x)-f(temp2,x))
        vals.append((lower+upper)/2)
        objectf.append(f((lower+upper)/2,x))
    return (temp2+temp1)/2


def func(x):
    return 4*x[0]*x[1]+(x[0]+x[1]**2)**2
def jacobian(x):
    return np.array([4*x[1]+2*x[0]+2*x[1]**2,4*x[0]+4*x[0]*x[1]+4*x[1]**3])

def obj(alpha,x):
    return(func(x-alpha*jacobian(x)))    
#def steepdescent(fun,gfun,x0,eps):  ## fun-target function;gfun-jabobian,x0-initial

from numpy.linalg import norm
def steepdescent(x0,eps,max_int): 
    miter=1## fun-target function;gfun-jabobian,x0-initial
    grad=jacobian(x0)
    vals=[]
    objectfs=[]
    alpha=[]
    x=x0
    while miter<=max_int:
        vals.append(x)
        objectfs.append(func(x))
        if norm(grad)>eps:
            alpha=goldsearch(obj,x,0,3,0.1)
            x=x-alpha*jacobian(x)
            grad=jacobian(x)
        else:
            break
        print(x,func(x),miter) 
        miter += 1
    return vals,objectfs,alpha,miter,


x0=[2,2]
result=steepdescent(x0,0.1,10)  
vals=result[0]
minimum=result[1]
alpha=result[2]
